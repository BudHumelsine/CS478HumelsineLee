*******User Manual********

This is a language based on Python, Scala, Java, and C

-Literals: *** more examples
123 - int literal for the integer 123.
-12 - int literal for the NEGATIVE integer -12.
1.2 - float literal for the float 1.2 *** (are these valid? 0.2, .2)
"hello" - String literal
'a' - char literal. Note that a char is a single character and thus '' cannot contain more than one symbol.
true - boolean literal for true.
false - boolean literal for false.
[1, 2, 3] - Array literal

-Symbols:
#  - comment. Everything until the next \n character is ignored.
#* - indicates the start of a block comment. Ends with *#.
== - test for equality. Evaluates to either true or false.
>  - boolean greater than. Evaluates to either true or false.
>= - boolean greater than or equal to. Evaluates to either true or false.
<  - boolean less than. Evaluates to either true or false.
<= - boolean less than or equal to. Evaluates to either true or false.
!= - boolean not equal to. Evaluates to either true or false.
     It should be noted that this is just a shortcut for the boolean expression: not a==b.
+= - increment by the specified value and reassign.
-= - decrement by the specified value and reassign.
     These operators, like the ++ and -- operators, can only be used on a line by themselves.
// - floor function
=  - (re)assignment operator. Only one assignment may occur per statement in order to avoid confusion.
     For example, one could not write: int a = 1 + sum(int[] myArray = [1, 2, 3, 4, 5]);
	 Also note that when a variable is initially assigned, it must include a type declaration explicitly.
	 Assignment: int a = 5;
	 Reassignment: a = 5; #Where a is some integer that has already been defined elsewhere
** - power function (x**2 is the same as x*x)
"" - denotes string literal. Escape characters may be used from inside the quotations.
'' - denotes char literal
%  - modulus operator
[] - Array literal OR collection accessor depending on where placed.
     These will be evaluated as a collection accessor if they are placed next to the reference to some collection object.
	 The return type of this collection accessor varies depending on the type of collection the user selects.
	 Arrays will return the element at that index (myArr[0] evaluates to 5).
	 Sets will return true if the element in [] is in the set (animals["dog"] evaluates to true).
	 Maps will return the corresponding value to the key given in [] (phonebook["jenny"] evaluates to "867-5309").
	 Otherwise, the [] are treated as an Array literal, much like 5 is a literal for the integer 5.
	 For example: int[] myArr = [1, 2, 3];
[:]- Array and String slicing operator (as used in Python). The slice operator is half-inclusive (left inclusive, right exclusive).
     That is, "hello"[0:1] returns "h" because it includes index 0, but not index 1.
	 The ints on either side of the colon are optional and their exclusion means different things.
	 [a:b] - return a new Array of the elements from a (inclusive) to b (exclusive).
	 [a:]  - return a new Array of the elements from a (inclusive) to the end of the Array.
	 [:b]  - return a new Array of the elements from the start of the Array to b (exclusive).
	 [:]   - return a new Array of the elements from the start of the Array to the end of the Array.
	         This is also known as a shallow copy.
() - grouping operator for mathematical expressions and expresses function inputs
+  - addition operator
-  - subtraction operator OR negative number literal if it precedes an int literal
*  - multiplication operator
/  - division operator
,  - element separator
{} - used to wrap multiple statements as a single statement, as used in functions and loops
.  - dot notation for method calls
\  - escape character. This symbol only has meaning within the context of a string.
+: - prepend operator for arrays
:+ - append operator for arrays

-Keywords:
and - boolean and
or - boolean or
not - boolean not
for - for loop
if - if statement
else - else clause of an overarching if statement
while - while statement
return - used to define the output or evaluation of a function.
         The type of the value returned must match the return type of the function.		
break - used to exit a loop. Syntax like the continue statement.
class - used to declare a class. More detailed syntax will follow later.
Void - the return type for null.
       If a function's return type is void, then a return statement is not required.
	   One MAY be used if it returns a null-type (i.e. return;)
True - boolean true
       It should be noted that, as in Python, many values can be used to represent a boolean true.
	   An empty array evaluates to false, as does the int 0 and the keyword false.
	   Every other non-null object evaluates to true.
	   Furthermore, the boolean value true, when type casted, maps to the integer value 1.
False - boolean false.
try - used together with the except statement to handle errors.
except - used together with the try statement to handle errors.
print("string") - prints the given string 


this language is case sensitive, but white space does not matter.

Context Free Grammar
<expr> = <expr3>


<expr1> = <num>
	| <bool>
	| <str>
	| <chr>
	| <Array>
	| '(' <expr> ')'
	|<expr>

<expr2> = <expr1>			   
	| <expr2> '*' <expr1>	
	| <expr2> '**' <expr1>	
	| <expr2> '/' <expr1>	
	| <expr2> '%' <expr1>	
	| "not " <expr2>					
	| <expr2> " and " <expr1>			
	| <expr2> " or " <expr1>	

<expr3> = <expr2>	
	| <expr3> '+' <expr2>				
	| <expr3> '-' <expr2>				   		
	| <expr3> "==" <expr2>				
	| <expr3> "!=" <expr2>				
	| <expr3> "<=" <expr2>				
	| <expr3> ">=" <expr2>				
	| <expr3> "<" <expr2>				
	| <expr3> ">" <expr2>	

<dec> = 
   | <funct>
   | <varDec>
   | "field" <ident> "=" "{" (varDec)* "}"
  
<stmt> = 
   | "for" "(" <ident> "in" <expr> ("to" | "until") <expr> ")" "{" <any> "}"
   | "while" "(" <expr> ")" "{" <any> "}"
   | "if" "(" <expr> ")" "{" <any> "}" ( "else if" "(" <expr> ")" "{" <any> "}")* ("else" "{" <any> "}")?
   | "print" "(" <expr> ")" "{}"			
	   
<any> = (<stmt> | <dec> | <expr>)*

<ident> = [a-zA-Z][a-zA-Z0-9_]*
<int> = -?[1-9][0-9]*
<flt> = -?[0-9]*"."[0-9]+
<num> = <int> | <flt>
<str> = \".*\"
<chr> = \'.\'
<bool> = "True" | "False" 
<type> = "Int" | "String" | "Void" | "Char" | "Double" | "Boolean"
<args> = "(" (<type> ":" <ident>) (, <type> ":" <ident>)* ")" | "()"
<funct> = <type> <ident> "(" <args> ")" "BEGIN" <ident> Anything "END" <indent>
        | <ident> "." <funct>
<Array> = "Array(" <int>* ")"
<varsDec> = <type> ":" <ident> "=" <expr>

*****Examples********

***Note: ...foo... is used to mean anything can be placed here

Variables are declared with the type, a colon, and the value
Int: x = 5
Bool: flag = True
reassignment is simply the variable names followed by the new value
x = 6
flag = False

Functions are declared in a similar fashion with return type, followed by the name, parameters in parenthesis, a begin statement and an end statement
Bool function(Bool: paramater1, Int: parameter2) BEGIN function
...foo...
END function

Int noParameterFunction() BEGIN noParameterFunction
...foo...
END function

Loops:
FOR
A for loop is instantiated with the "for" keyword, followed by the variable, and one integer to or until another integer
Note: Loops cannot be nested
for (x in 1 until 5){
	...foo...
}
for (y in 2 to 6){
	...foo...
}

WHILE
a while loop is instantiated with the keyword "while", followed by a boolean
while(true) {
	...foo...	
}

while(x < 5){
	...foo...
}

IF
an if statement is instantiated with the keyword "if" and some boolean value, followed by any number of "else if" statements and an options else
if (x < 5){
	...foo...
}
else if (x > 5){
	...foo...
}
else {
	...foo...
}

if (x < 5){
	...foo...
}
if (x == 5){
	...foo...
}
else {
	...foo...
}

PRINT
a print statement is instantiated with the word print followed by curly braces (all statements are followed by curly braces)
print("x"){}
print(y){}

RETURN
a return statement returns the value following the keyword, and ending a function early
return x
return "This is a return statement"

Arrays can be created like such (Note they only support integers):
Array(1,2,3)
Array()

Fields are similar to classes, but they do not include functions.
The format of a field is

field NAME = {
	Int: attribute1 = 0
	String: attribute2 = "This is another attribute"
}

These fields could be used to implement linked links in such a manner
field link3 = {
	Int: head = 7
	Void: tail = Void
}
field link2 = {
	Int: head = 6
	Int: tail = link3.head
}
field link1 = {
	Int: head = 5
	Int: tail = link2.head
}

